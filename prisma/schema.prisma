generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model games {
  created_at         DateTime?   @default(now()) @db.Timestamptz(6)
  firebaseId         String?     @default("")
  date               DateTime?   @default(now()) @db.Timestamptz(6)
  firebaseLocationId String?     @default("")
  firebaseOpponentId String?     @default("")
  firebaseSeasonId   String?     @default("")
  embedLink          String?     @default("")
  video              String?     @default("")
  roster             Json?       @default("[]")
  firebaseRoster     Json?       @default("[]")
  id                 String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  locationId         String?     @db.Uuid
  seasonId           String?     @db.Uuid
  opponentId         String?     @db.Uuid
  rosterArr          String[]    @db.Uuid
  locations          locations?  @relation(fields: [locationId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  teams              teams?      @relation(fields: [opponentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  seasons            seasons?    @relation(fields: [seasonId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  goals              goals[]
  penalties          penalties[]
}

model goals {
  firebaseId      String?
  firebaseGameId  String?   @default("")
  period          Int?      @db.SmallInt
  team            String?   @default("")
  firebaseTeamId  String?
  time            String?   @default("")
  ytLink          String?   @default("")
  created_at      DateTime? @default(now()) @db.Timestamptz(6)
  assists         Json?     @default("[]")
  firebaseAssists Json?     @default("[]")
  id              String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  teamId          String?   @db.Uuid
  playerId        String?   @db.Uuid
  gameId          String?   @db.Uuid
  games           games?    @relation(fields: [gameId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  players         players?  @relation(fields: [playerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  teams           teams?    @relation(fields: [teamId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model leagues {
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  name       String?
  firebaseId String?
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  seasons    seasons[]
}

model locations {
  created_at           DateTime? @default(now()) @db.Timestamptz(6)
  code                 String?   @default("")
  googleMapsLink       String?   @default("")
  firebaseId           String?   @default("")
  name                 String?   @default("")
  googlePlusCode       String?   @default("")
  id                   String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  googlePhotoReference String?
  googlePlaceId        String?
  games                games[]
}

model orders {
  created_at     DateTime? @default(now()) @db.Timestamptz(6)
  orderAmount    Float?
  orderStatus    String?   @default("")
  orderedItems   Json?     @default("[]")
  paymentStatus  String?   @default("")
  referenceId    String?   @default("")
  shippingStatus String?   @default("")
  status         String?   @default("")
  user           Json?     @default("{\"email\": \"\", \"fullName\": \"\"}")
  id             String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  firebaseId     String?
}

model penalties {
  created_at       DateTime? @default(now()) @db.Timestamptz(6)
  firebaseId       String?
  firebaseGameId   String?
  minutes          Float?    @db.Real
  firebasePlayerId String?   @default("")
  team             String?   @default("")
  id               String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  gameId           String?   @db.Uuid
  teamId           String?   @db.Uuid
  playerId         String?   @db.Uuid
  penaltyType      String?
  period           Int?      @db.SmallInt
  time             String?
  ytLink           String?
  games            games?    @relation(fields: [gameId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  players          players?  @relation(fields: [playerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  teams            teams?    @relation(fields: [teamId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model players {
  created_at            DateTime?   @default(now()) @db.Timestamptz(6)
  email                 String?     @default("")
  firebaseId            String?     @default("")
  firstName             String?     @default("")
  lastName              String?     @default("")
  hometown              String?     @default("")
  image                 String?     @default("") @db.VarChar
  nickname              String?     @default("")
  number                Int?        @db.SmallInt
  phoneNumber           String?     @default("")
  position              String?     @default("")
  auth0AccountId        String?     @default("")
  born                  DateTime?   @default(now()) @db.Timestamptz(6)
  favoriteNhlTeam       String?     @default("")
  favoritePlayer        String?     @default("")
  gameDayNotifications  Boolean     @default(true)
  jerseySize            String?     @default("")
  preferredEmail        String?     @default("")
  preferredJerseyNumber Int?        @db.SmallInt
  preferredPhone        String?     @default("")
  tShirtSize            String?     @default("")
  id                    String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  handedness            String?     @default("Right")
  height                String?     @default("5'10\"")
  notifications         Json?
  jerseyNumber          Int?        @db.SmallInt
  roles                 Json?       @default("[]")
  goals                 goals[]
  penalties             penalties[]
}

model seasons {
  created_at           DateTime? @default(now()) @db.Timestamptz(6)
  endDate              DateTime? @db.Timestamptz(6)
  games                Json?     @default("[]")
  firebaseLeagueId     String?
  leagueName           String?   @default("")
  name                 String?   @default("")
  startDate            DateTime? @db.Timestamptz(6)
  firebaseRoster       Json?     @default("[]")
  firebaseGames        Json?     @default("[]")
  standings            Json?     @default("[]")
  statBypass           Json?     @default("[]")
  type                 String?   @default("")
  id                   String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  leagueId             String?   @db.Uuid
  standingsLink        String?   @default("")
  firebaseId           String?
  roster               String[]  @db.Uuid
  leagues              leagues?  @relation(fields: [leagueId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  games_gamesToseasons games[]
}

model teams {
  created_at DateTime?   @default(now()) @db.Timestamptz(6)
  firebaseId String?     @default("")
  logo       String?     @default("") @db.VarChar
  teamName   String?     @default("")
  id         String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  games      games[]
  goals      goals[]
  penalties  penalties[]
}
